#!/bin/bash

############################################################
#
# Publishes the app to Flathub.
#
############################################################

set -e

# Argument validation.
if [ $# -eq 0 ]
  then
    echo -e "\nUsage: publish-to-flathub <tag>\n"
    exit 1
fi

# Constants unique to the application.
APP_ID='ind.ie.Gnomit'
GITHUB_ACCOUNT_NAME='indie-mirror'
LOCAL_URL='file:\/\/\/home\/aral\/ind.ie\/gnomit\/gjs'
REMOTE_URL='https:\/\/source.ind.ie\/gnome\/gnomit\/gjs.git'

# General constants.
MANIFEST_FILE_NAME="$APP_ID.json"
APPDATA_FILE_NAME="$APP_ID.appdata.xml"
DESKTOP_FILE_NAME="$APP_ID.desktop"

RELEASE_DIRECTORY_NAME="release"
BUILD_DIRECTORY_NAME="build"
REPOSITORY_DIRECTORY_NAME="repository"

FLATHUB_DIRECTORY='../flathub'
RELEASE_DIRECTORY="$FLATHUB_DIRECTORY/$RELEASE_DIRECTORY_NAME"

INDENT='                    '

# Test constants.
TEST_DIRECTORY="$FLATHUB_DIRECTORY/test"

#
# Runs command in requested directory and restores the working directory at the end.
# Usage: run <directory> "<command>"
#
runIn(){
	pushd $1 >/dev/null
	eval $2
	popd >/dev/null
}

# Prints “done” with a checkmark.
DONE(){
  printf ' done ✓\n'
}

# Get the commit that the requested tag points to.
commit=$(git rev-list -n 1 $1)

echo -e "\nPublishing version $1 to Flathub…\n"

# Holds the branch to push to. By default, master,
# but might be the $APP_ID branch if this is the
# initial submission. Also, if it is the latter,
# we will set the -u flag.

gitBranch='master'
gitFlag=''

#
# Create the output directories if they don’t exist
# and clone the Flathub submission fork.
#
if [ ! -d "$FLATHUB_DIRECTORY" ]; then
  printf '  • Creating Flathub directories…'

  mkdir "$FLATHUB_DIRECTORY"
  mkdir "$FLATHUB_DIRECTORY/$BUILD_DIRECTORY_NAME"
  mkdir "$FLATHUB_DIRECTORY/$REPOSITORY_DIRECTORY_NAME"

  DONE

  printf '  • Cloning your Flathub fork…'

  runIn "$FLATHUB_DIRECTORY" "git clone --branch=new-pr git@github.com:$GITHUB_ACCOUNT_NAME/flathub.git $RELEASE_DIRECTORY_NAME"
  runIn "$RELEASE_DIRECTORY" "git checkout -b $APP_ID"
  gitBranch="$APP_ID"
  gitFlag="-u"

  DONE
fi

#
# Create the directory structure and check out the git
#

#
# Copy Flatpak and appstream metadata.
#
printf '  • Copying Flatpak and appstream metadata…'

# Flatpak manifest file.
cp $MANIFEST_FILE_NAME $RELEASE_DIRECTORY

# Appstream appdata file.
cp "data/$APPDATA_FILE_NAME.in" "$RELEASE_DIRECTORY/$APPDATA_FILE_NAME"

# Desktop file.
cp "data/$DESKTOP_FILE_NAME.in" "$RELEASE_DIRECTORY/$DESKTOP_FILE_NAME"

# Icon images.
cp gnomit-*.png $RELEASE_DIRECTORY

DONE

#
# Add .gitignore to ignore the .flatpak-builder directory that will be
# created during testing (it doesn’t matter if we overwrite an existing one.)
#
echo '.flatpak-builder' > $RELEASE_DIRECTORY/.gitignore

#
# Update manifest with the tag and commit instead of
# of the local repository path.
#
printf "  • Updating manifest with commit of tag $1…"

sed -i -e "s/$INDENT\"url\" : \"$LOCAL_URL\"/$INDENT\"url\" : \"$REMOTE_URL\",\n$INDENT\"tag\" : \"$1\",\n$INDENT\"commit\" : \"$commit\"/" "$RELEASE_DIRECTORY/$MANIFEST_FILE_NAME"

DONE

#
# Test: build it.
#
printf "  • Test: building version $1…"

runIn $RELEASE_DIRECTORY "flatpak-builder --force-clean --repo=../$REPOSITORY_DIRECTORY_NAME ../$BUILD_DIRECTORY_NAME ./$MANIFEST_FILE_NAME"

DONE

#
# Test: install it.
#
printf "  • Test: installing version $1…"

runIn $FLATHUB_DIRECTORY "flatpak --user remote-add --if-not-exists  --no-gpg-verify local-gnomit-repository $REPOSITORY_DIRECTORY_NAME"
runIn $FLATHUB_DIRECTORY "flatpak --user install local-gnomit-repository $APP_ID"

DONE

#
# Create the test directory and ask the person to test the build.
#

if [ -d "$TEST_DIRECTORY" ]; then
  printf "  • Test: deleting existing test environment…"
  rm -rf "$TEST_DIRECTORY"
  DONE
fi

printf "  • Test: creating test environment…"
mkdir "$TEST_DIRECTORY"
echo 'A test' > "$TEST_DIRECTORY/a-test.txt"
git config --global core.editor "flatpak run ind.ie.Gnomit"
runIn "$TEST_DIRECTORY" "git init"
runIn "$TEST_DIRECTORY" "git add --all"
DONE

printf "  • Test: launching test…"
runIn "$TEST_DIRECTORY" "git commit"
DONE

echo ''
echo '****************************'
echo '* Please test the release! *'
echo '****************************'
echo ''

#
# Confirm: do you want to commit and push this release?
#
echo 'Do you wish to commit and push this release to Flathub?'

select yn in "Yes" "No"; do
    case $yn in
        Yes ) echo -e "\nYes: OK, will commit and push to Flathub ✓\n"; break;;
        No ) echo -e "\nNo: OK, exiting ✘\n"; exit;;
    esac
done

#
# Commit the version
#
printf "  • Committing version $1…"

runIn $RELEASE_DIRECTORY "git add --all"
runIn $RELEASE_DIRECTORY "git commit -m \"Version $1\""

DONE

#
# Push to Flathub
#
printf "  • Pushing version $1 to Flathub…"

# runIn "$RELEASE_DIRECTORY" "git push $gitFlag origin $gitBranch"

DONE

# All done! :)
echo -e "\n✓ Version $1 deployed to Flathub.\n"
